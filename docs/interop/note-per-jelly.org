* Interop
jelly mira ad avere un certo grado di interoperabilità con il java sottostante

da un lato si vuole poter chiamare metodi java o accedere a membri di classi java da codice jelly

dall'altra parte si vuole poter accedere a dati prodotti nel codice jelly dal codice java sovrastante

entrambe queste operazioni sono abbastanza alla runtime.


* Dati e metodi java dentro jelly
si fottono malamente varie idee di clojure, ma non sono troppo familiare con gli internal di java&Co. da poter implementare una qualche form di ~import~ quindi boh, per ora pensiamo ad accedere a membri esplicitamente dati a jelly

** Java class, Jelly class(?)
jelly avrà due tipi di dati
 - roba builtin (int, cons, string, char, ...)
 - roba user defined (quindi classi/struct)

ai fini di non rompermi il cazzo le classi saranno un qualche strano ibrido tra un json che non ci ha provato troppo e un dizionario in python, vale a dire qualcosa che associa nomi a dati, e se proprio vuoi quei dati possono essere funzioni.
Non intendo mettermi a fare chissà cosa di ereditarietà.

Internamente sarà una cazzo di hash map e lo sappiamo tutti.

** Entrare nell'albero dei nomi
clojure ha l'idea magnifica di usare nomi validi in lisp e dannatissimi in java per esprimere una certa semantica nei nomi proprio dei simboli

visto che non ho lo sbatti di fare una cosa del genere mi limiterò ad avere le funzioni

 - ~(call <method> <object> <&rest args>)~
 - ~(callStatic <method> <class> <&rest args>)~
 - ~(ref <attribute> <object>)~
 - ~(refStatic <class> <object>)~

poi è anche fattibile che decida di avere un qualche meccanismo di "desugaring" che prenda stringhe come ~"Math/PI"~ e le trasformi in un ~(refStatic Math PI)~, ma a quello ci pensiamo dopo

*** call
[[https://www.oracle.com/technical-resources/articles/java/javareflection.html][reflection]]
**** Static
[[https://www.oracle.com/technical-resources/articles/java/javareflection.html][reflection]]
*** ref
[[https://www.oracle.com/technical-resources/articles/java/javareflection.html][reflection]]
**** Static
[[https://www.oracle.com/technical-resources/articles/java/javareflection.html][reflection]]

*** ~&rest args~
abemus due problemini
 - come facccio a dire una cosa del genere a java?
 - permettere una sintassi come ~&rest args~ richiede abbastanza spaccamento di coglioni con le liste di parametri formali

**** Come dirlo a java
java ha una sintassi per liste di parametri variabili, per dettagli vedere [[https://docs.oracle.com/javase/8/docs/technotes/guides/language/varargs.html][i doc di oracle]]

qusta richiede gli argomenti in questione sottoforma di array, essendo che l'array è fatto di reference dello stesso tipo, queste reference saranno spesso tutte a ~Object~.

è inoltre del tutto fattibile chiamare metodi java arbitrari a runtime senza troppo bisogno di rompersi i coglioni con chissà quale sistema perchè[fn::grazie dom] si può fare tramite la [[https://www.oracle.com/technical-resources/articles/java/javareflection.html][reflection]]

**** Magna cum spaccatio coglionerum
per quello toccherà a me capire come strutturare una qualche struttura(quindi classe) ~Args~ che abbia modo di tradursi in chiamajjava


* Dati e metodi jelly dentro java
jelly, come detto prima, è molto probabile che rappresenterà le struct come mappe, per tradurre queste in java quindi
 - se posso creare classi a runtime bella, sarà un puttanaio ma al massimo creo un record a runtime dalla mappa e festa finita.
 - posso avere una qualche classe ~JellyStruct~ che descrive la struct all'interno di jelly con qualche metodo ~getMember~ o ~callMember~[fn::non ho troppo il coraggio di chiamarli metodi, jelly non è object oriented] che può ritornare un boh, dipende.
   Questo credo sarebbe preferibile al creare classi a runtime.

** Dati
abbiamo due opzioni per rappresentare i dati (quindi roba che non è una funzione) dentro java
 - rendi la struttura Jelly sottostante (quindi ~LispValue<Integer>~ &Co.)
 - trovi un qualche accrocchio per fare in modo che il valore venga tradotto a valore java da sotto

*** Valore Jelly
questo richiederebbe complicare l'api di qualsiasi foreign function interface mi decida ad utilizzare, ma potrebbe aiutare a
 - rendere più esplicita la collaborazione con codice non java all'interno del codice java
 - non creare puttanai con io che vado di reflection e indirection e can't get an erection

*** Accrocchio
l'idea dell'accrocchio si divide in due parti
 - primitive
 - non primitive

le primitive saranno wrapper intorno a ~Integer~, ~Char~, ~String~, ~Double~ &Co.

le non primitive saranno wrapper intorno a ~Object~ generici

è possibile che voglia integrare in qualche modo il wrapper generico e il wrapper primitivo per potre chiamare metodi di ~Integer~ da un ~LispInteger~, ma quello è da decidersi in futuro


