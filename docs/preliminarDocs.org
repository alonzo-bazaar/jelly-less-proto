* API desiderata

questo più o meno è come dovrebbe funzionare, a livello PARECCHIO alto, il main dell'intepreter

** Parser
#+begin_src java
  class BigMainUpstairs {
      public static void main(String[] args) {
          /* parse the code */
          CharStream allChars = CharStream.fromFile("source.lisp");
          CharStream ignoreComments = IgnoreCommentsStream.fromChars(allChars);
          TokenStream tokens = TokenStream.fromChars(ignoreComments);
          FormStream formsStr = FormStream.fromTokens(tokens); 
        
          /* evaluate the code */
          LispEvaluator le = new LispEvaluator();
          formsList = formsStr.collect();
          for(LispForm lf : formsVec) {
              le.eval(lf);
          }
      }
  }
#+end_src

** Evaluator
#+begin_src java
  class Evaluator {
      EnvList envs;
      LispValue ref(String symname) {
          /* ... */
          something(this.envs);
          /* ... */
      }
      LispValue eval(LispForm) {
          /* rifai l'evaluator di sicp
           ,* poi torna qui e vedi che cazzo fare
           ,* magari rivedi anche la parte di data directed
           ,*/
      }
  }

#+end_src

** E come raggiungerla
*** Parser
ci servono
 - ~CharStream~
   - ~IgnoreCommentsStream~
   - ~fromFile~ 
   - ~fromChars~ 
   - (probabile) ~fromString~ 
 - ~TokenStream~
   - ~fromChars~ 
 - ~FormStream~
   - ~fromTokens~ 

#+begin_quote
(l'interfaccia stream, ho visto, non credo somigli troppo a quello che voglio fare, ~Iterator~ è molto più simile alle funzionalità che volgio effettivamente utilizzare, quindi non so se fare che tutte ste classi in realtà sono un ~CharIterator~, ~TokenIterator~ e company, boh

metà del design che avevo in mente era ~.next()~, ~.next()~, ~.next()~, ...)
#+end_quote

**** CharStream
non so se fare
 - una weak base class a cui posso cambiare un metodo ~ignoreChars~
 - due classi diverse e basta (l'ignore posso anche metterlo in un ~next~  sovrascritto)

è probabile che sarà una classe perlomeno astratta visto che
 - ~fromChars~
 - ~fromString~
 - ~fromFile~

hanno metodi abbastanza diversi per accedere ai caratteri, e probabilmente saranno estensioni già loro della classe ~CharStream~

potrei anche fare ~CharStream~ una classe puramente astratta e al massimo avere una classe ~BasicCharStream~ (che fa venire flashback a messaggi di errore di =g++= ma abbe')

**** TokenStream

*** Evaluator
