* TODO , fa i TODO nel codice
 - [X] crea una classe a parte per le util di sistema operativo
 - [X] ripulisci le condizioni di arresto dell'estrazione di tokenizer
 - [ ] crea(e inserisci nella struttura del codice) una classe per la lambda list
 - [ ] crea(e inserisci nella struttura del codice) una classe per i token
 - [ ] ristruttura la pipeline di parsing per permettere un'interazione più naturale con un repl
 - [X] disaccoppia la lista di nomi builtin con i nomi delle funzioni builtin considerate (vale a dire, toglila)

** TODO 100% test coverage
quando arrivi a poterlo fare, il che sarebbe adesso (hai migrato a junit5 per un motivo) rifai/aggiugni sti test, grazie mille

** TODO per la parsing pipeline
 - [ ] magari progettala
 - [ ] magari falla

* DONE Per testabilità
a fini di (far funzionare la cosa) potrebbe essere un'idea rendere la semantica di jelly un sottoinsieme di una semantica di un lisp che funzioni, come common lisp, scheme, o clojure

common lisp è quello con cui sono più familiare, scheme è quello più semplice, clojure è quello che gli va di più java

al momento la semnatica è decisamente common lispiana, quindi mi sa che finirò su quello (vedere allora come cazzo faccio con SETQ SPONGEBOBU)

(fatto scheme, anche se ~(car nil) => nil~ e ~(cdr nil => nil)~) ma aboh

* TODO Multi file
per quanto non abbia lo sbatti di implementare un package system al momento sarebbe comunque un'idea vedere come cazzo fare a permettere qualcosa come
~(load "some/fucking/file.scm")~ all'interno di uno script jelly (quindi ~load~ come funzione builtin)

ai fini di fare questo
 - [ ] capire come cazzo specificare path in java
 - [ ] capire come tradurlo a jelly
 - [ ] capire come farlo platform independent (copiando racket, ovviamente)

* TODO Basi
rivedi un po' di sicp e crafting interpreters per farti una mezza idea su come fare per ripulire il codice e le idee che hai creato

** Idee da crafting interpreters
** Idee da sicp

* TODO Package
certi package VANNO RINOMINATI CAZZO
 - ~lang~ mettilo tipo ~jelly.lang~, e da lì puoi anche togliere nomi come ~LispExpression~ o ~LispSymbol~, avrai qualcosa di molto più chiaro come ~jelly.lang.Expression~ e ~jelly.lang.Symbol~
   (oppure ~org.jelly.lang~, per stile, o per fare il pirla)
   
* TODO Parser
** TODO Characters
invece di limitarci a caratteri e basta potrebbe aiutare ristruttrare certe parti del codice con un'architettura più "a scanner" che permetta sia un ~nextChar~ che un ~nextLine~

questo sarebbe da farsi facendo in modo che lo "scanner" in questione non diventi un ammassone di merda

magari fai una classe ~Characters~ (poi le trovi un nome migliore) che abbia sia ~nextChar~ che ~nextLine~
classe generabile sia da una stringa che da un file, così niente /"construction work with a toothpick for a tool"/

** TODO Tokens
end of file deve essere un token secondo me

** TODO Iteration
è probabile che un ~getLine~ e ~tokenizeLine~ porterebbe a del codice più gestibile (vale a dire non richiedere ~prefixIterator~, che è un aborto)

ai fini di usare il ~hasNext()~ più come check di "posso prendere?" sarebbe utile costruire internamente la rappresentazione, mandarla, e continuare
questo permetterebbe, vale a dire, il poter mandare stringhe di codice multiline nel repl (non stringhe multiline, proprio codice multline)

*** ~hasNext~ con lista di valori precalcolati
costruire i valori sul momento porta a problemi per quanto riguarda il "ok, i caratteri/token/... in arrivo non mi permettono di costruire un token/espressione/... completi"
sarebbe da fare un
 - esaurisci i dati in input, costruendo tutti gli enti che puoi
   - per ~hasNext~ vedi se la lista e vuota
   - per ~next~ consuma l'elemento più vecchio della lista

poi per quando vuoi continuare si farà solo che al capo dei capi (vale a dire l'iteratore di caratteri, o righe, o cazzo capita) verrà data nuova roba, e da lì potrai continuare

questo sistemerebbe anche la semantica dell' ~hasNext~ di expressionIterator, la cosa si può ovviamente generalizzare con vettori/liste di oggetti "prefetched" che vengono costruiti, consumati/mandati, contorollati in modo tale da permettere casi in cui i dati in arrivo costituiscano solo una rappresentazione parziale dell'ente che stai mandando

sarebbe da vedere se sia o meno il caso di rievocare la bestia di satana che era fare il "send token, send tree, etc..."

** TODO Intermediate Form
*** TODO Abstract Synthax tree
 - una classe a parte per l'abstract synthax tree
 - magari anche una "sealed interface" che ha sia token (con un tipo) che cons
 - vedi poi se conviene ancora avere cons come struttura per l'ast
   (tanto non useresti i cons normali, visto che l'ast avrà anche informazioni per error reporting e sarà palesemente codice senza troppo di dati)
 - come/se mantenere il mantra "code is data" con una cosa del genere?, alcune idee potrebbero essere
   - fare reporting solo di errori a compile time (e a runtime usare cons normali)
   - lascia stare il "code is data"
   - l'~AST~  implementa ~LispList~ (o, perlomeno, ~AstCons~, ~AstToken~ magari anche no, ma un eventuale ~AstNil~ ci sta, anche se forse basterebbe usare ~NIL~, ma potrebbe dare dei problemi coi tipi (~NIL~ non implementerebbe ~AST~))
     - anche se poi cosa ci farei con queste informazioni?

si potrebbe avere che ~AST~ viene utilizzato finchè non produci gli ~Evaluable~, poi gli ~Evaluable~ avranno qualche funzione di error reporting (~getRow()~, ~getCol()~, ...), ma i dati presenti non ce l'avranno, quindi amen

l'idea "finale" sarebbe, quindi
 - ~AST~ fino alla produzione degli ~Evaluable~
 - l'~Evaluable~ prende le informazioni di debug dall'~AST~ (per fare eventuale reporting di errori a runtime)(la cosa potrebbe richiedere l'implementazione un po' più esplicita di un call stack per essere fatta meglio, pensaci dopo?)
 - i dati (CONSY BOIS) non prendono le informazioni di debug

** TODO Reader
metti uno o più stadi intermedi di trasformazione tra l'~ExpressionIterator~ e la rappresentazione eseguibile per permettere desugaring e macroexpansion
(~'a~, ~a . b~, tante belle macro)

*** TODO vedi se mettere delle macro

** DONE Repl Specifics
multiline and dandelion wine

* TODO Evaluator
** Type System
*** DONE Scope del type system
sarebbe gradito se si potesse fare un ~LispExpression.type~ da qualche parte
le due/tre idee al momento sono
 - non avere un type system
 - avere un type system e
   - avere tipi ~LispType~ per builtin e struct
   - avere tipi a parte(di java) per i builtin, e usare un ~LispType~ a parte per gli struct

il tipo di un'espressione sarebbe immutabile e abbastanza ~final~ anche per le classi (tipo un ~public static final LispType type~)
vedere poi se aiuta con boh, leggibilità&Co.

classe cast?

(ho deciso di non mettere un type system per i tipi base anche se probabile ci sarà una sottospecie di type system per le struct)
(le struct copiale da racket)

*** TODO Implementare sto stronzo
fai ste struct

** TODO Functions
*** TODO Builtin Functions
**** DONE Lambda
mettere nuove funzioni builtin porterà a probelmi GROSSI per quanto riguarda la pulizia, più di altro, della loro chiamata
al momento è un simile switchone orrendo sul nome che yanderedev si bagna a letto

*** TODO Lambda list
 - creare una qualche classe ~LambdaList~ che permetta di avere parametri keyword/optional/rest?
 - modi per chiamare questa
   - ~*args~ e ~**kwargs~ stile python
   - tutti i parametri sono "kwarg"?
   - mettere ~&optional~ e ~&rest~ insieme potrebbe portare a problemi, magari mettere solo ~&key~ e ~&rest~? (che equivalrebbe ad ~*args~ e ~**kwargs~)

se vuoi crearla da codice java, rendere facile (fattibile in giornata) la costruzione della lambda list da java.

come fare i binding dalla lambda list?

*** TODO Call stack
utilizzabile per error a runtime, sarebbe un ~java.util.Stack<Procedure>~
il call stack sarebbe parte del ~eval.runtime.Runtime~, per quanto questo porterebbe a dover vedre come accoppiare la function call al runtime
come cosa sarebbe fattibile se il ~Runtime~ fosse un singleton, ma al momento voglio lasciare la possibilità di più lisp machine (ergo ~Runtime~) attivi contemporaneamente

quindi

**** TODO Vedi come "accoppiare" la procedure call e il runtime
si potrebbe
 - fare ~Evaluable.eval(Runtime r)~, il che renderebbe la presenza di un ~Runtime~ costante e obbligatoria tipo 40 righe di ~GL_INIT~
   se devo fare una cosa del genere probabilmente tiro frameworkate ovunque.
   - [ ] vedere se voglio accoppiare così tanto il runtime al lisp embedded o se voglio tenere il runtime come "handler" di un environment
     - anche se a dirla tutta dovrei dichiarare un environment comunque per fare sta roba, quindi sostituirei solo il ~new Environment()~ con ~new Runtime()~
     - e l'environment è comuque fatto per essere utilizzato da un runtime spesso e volentieri
   - [ ] vedere se la cosa è ancora "elegante" ergo
     - non crea accoppiamenti del cazzo
     - non crea implicitamente semnatiche del cazzo

(però avrebbe parecchio senso, sarebbe un refactoring[fn::non per la definizione di fowler ma vaffanculo] della madonna, ma tanto ne ho già fatti altri

altrimenti potrei tenere ~Evaluable.eval(env)~ e fare un ~Runtime.eval(expression)~ che si comporterebbe come un visitor
(ho sta mezza impressoine che farebbe cagare al cazzo, chiedi a esperti (Dom))

vedere poi come/se tenere la separazoine dal java sottile sottile come la vorresti preservando comunque questo aspetto di "runtime"
(e nel farlo magari riporogetta un minimo che cazzo di interfaccia presentare all'eventuale utente che vuole utilizzare jelly come linguaggio embedded senza rompersi troppo i coglioni)


**** TODO Da li non so se implementare le eccezioni
evitiamo che stai già proiettando anche troppo che non ha manco fatto un ast o una struct

*** TODO Error Seporting
 - mettere informazioni di debug nel synthax tree e forse anche nei token
 - (tanto probabile il synthax tree lo faccio con un composite e le leaf sono token)

* TODO Frontend
serve un package di frontend per riadattare la struttura interna di jelly all'esterno
importare un ~org.jelly.lang.eval.runtime.Runtime~ sembra un pochino uno stupro di astrazione

e poi mi sa che il nome ~Runtime~ da un po' un'idea sbagliata su cosa dovrebbe essere
magari rinominarlo a qualcosa tipo ~Client~, o qualcos'altro che faccia intuire il suo utilizzo come
 - "guarda bro voglio valutare una stiringa"
 - "guarda bor voglio valutare un file"

façade?   
il package eval è comunque roba parecchio interna, la responsabilità di "bro voglio valutare una stringa" sarebbe meglio spostarla in un package di frontend
tipo un ~org.jelly.api.Client~ ?

vedere dove mettere la responsabilità di creazione dell'environment iniziale
 - non nell'environment, quello ha lo scopo di "hash map a livelli per lexical binding"
 - non nel ~Client~ che quello deve solo fare il frontend
 - nel ~Runtime~ mi sembra un po' tirata
 - ?

* Environment
 - [X] fai funzionare ~mapcar~
   - [X] capire come mai non funziona ~mapcar~
