* Crafting interpreters
** Classe
#+begin_src java
  package com.craftinginterpreters.lox;

  class Token {
      final TokenType type;
      final String lexeme;
      final Object literal;
      final int line; 

      Token(TokenType type, String lexeme, Object literal, int line) {
          this.type = type;
          this.lexeme = lexeme;
          this.literal = literal;
          this.line = line;
      }

      public String toString() {
          return type + " " + lexeme + " " + literal;
      }
  }
#+end_src

#+begin_quote
The scanner works its way through the source code, adding tokens until it runs out of characters. Then it appends one final “end of file” token. That isn’t strictly needed, but it makes our parser a little cleaner.
#+end_quote


** Interfaccia al Resto
i token rappresentano parti della sintassi?
almeno quelle parti che possono essere "catturate" dal tipo di token

in questo caso avrebbe senso fare
 - literal
 - punctuation
 - symbol

o al massimo
 - literal
 - punctuation
 - altro

visto che lisp non ha altro (almeno l'interpreter non ha altro, highlighing dei commenti so' cazzo di tree-sitter)

questo permetterebbe di fare "dispatch" sui token con un bel switch sui tipi, anche se poi richiederebbe un sottoswitch sulle punteggiature


